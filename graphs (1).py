# -*- coding: utf-8 -*-
"""Graphs.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1rDqH-GzLIetPNW_jtE1Bjf08C86pSQot

\For graph representation, we will be using an **Adjacency List**

Each element in the list will be a triple in the form (neighbour, parent, weight). For unweighted graphs, weight can be = 1.

For now, let us keep all the parents as None.
"""

RomaniaMap  = dict()

#Let us add the vertices representing the Romanian cities by their first letter
vertices = ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'V', 'Z']
print(len(vertices))

#Let us now add the edges and insert it into the dictionary
RomaniaMap['A'] = [('S', None, 1), ('T', None, 1), ('Z', None, 1)]
RomaniaMap['B'] = [('F', None, 1), ('U', None, 1), ('P', None, 1), ('G', None, 1)]
RomaniaMap['C'] = [('D', None, 1), ('R', None, 1), ('P', None, 1)]
RomaniaMap['D'] = [('C', None, 1), ('M', None, 1)]
RomaniaMap['E'] = [('E', None, 1)]
RomaniaMap['F'] = [('B', None, 1), ('S', None, 1)]
RomaniaMap['G'] = [('B', None, 1)]
RomaniaMap['H'] = [('E', None, 1), ('U', None, 1)]
RomaniaMap['I'] = [('N', None, 1), ('V', None, 1)]
RomaniaMap['L'] = [('M', None, 1), ('T', None, 1)]
RomaniaMap['M'] = [('D', None, 1), ('L', None, 1)]
RomaniaMap['N'] = [('I', None, 1)]
RomaniaMap['O'] = [('S', None, 1), ('Z', None, 1)]
RomaniaMap['P'] = [('B', None, 1), ('C', None, 1), ('R', None, 1)]
RomaniaMap['R'] = [('C', None, 1), ('P', None, 1), ('S', None, 1)]
RomaniaMap['S'] = [('A', None, 1), ('F', None, 1), ('O', None, 1), ('R', None, 1)]
RomaniaMap['T'] = [('A', None, 1), ('L', None, 1)]
RomaniaMap['U'] = [('B', None, 1), ('H', None, 1), ('V', None, 1)]
RomaniaMap['V'] = [('I', None, 1), ('U', None, 1)]
RomaniaMap['Z'] = [('A', None, 1), ('O', None, 1)]

print(RomaniaMap)

"""Some tasks to do in the lab:
1. Write a function called "getNeighbours(x)", which gives a list of neighbouring vertices in **alphabetical order** for a given vertex x.
2. Create a similar graph by reading the data from the user. Assume that the graph is (a) directed and (b) unweighted. You must prompt the user for the number of vertices and the adjacency list.
3. Create a similar graph by reading the data **FROM a  text file** (format to be determined).
"""

def getNeighbours(x):
  neighbours = RomaniaMap[x] #Extracting the neighbouring nodes.
  neighbourList = [] #Initializing an empty list to store the neighbours
  for neighbour in neighbours:
    city,parent,weight = neighbour #Extracting the name, parent, and weight from the node.
    neighbourList.append(city) #Adding the node name to the list
  sortedList = sorted(neighbourList)
  print(sortedList)

getNeighbours('B')

numberOfVertices = int(input("Enter the number of vertices:"))
RomaniaMapUser = dict()
for i in range(0, numberOfVertices):
  vertexName = input("Enter the vertex:")
  key = vertexName
  neighbours = input("Enter the neighbours in a comma-separated string:")
  neighbourList = neighbours.split(",")
  cityList = []
  for neighbour in neighbourList:
    cityTuple = (neighbour, None, 1)
    cityList.append(cityTuple)
  value = cityList
  RomaniaMapUser[key] = value
print(RomaniaMapUser)

RomaniaMapFile = dict()
fileName = "Graph.txt"
f1 = open(fileName, "r")
lines = f1.readlines()
for line in lines:
  if(len(line.split("\t")) != 2):
    continue
  parts = line.split("\t")
  key = parts[0]
  neighbours = parts[1].split(",")
  value = []
  for neighbour in neighbours:
    triple = (neighbour, None, 1)
    value.append(triple)
  RomaniaMap[key] = value
print(RomaniaMap)